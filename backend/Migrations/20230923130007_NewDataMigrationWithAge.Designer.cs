// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoGameAppBackend.Data;

#nullable disable

namespace VideoGameBackend.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20230923130007_NewDataMigrationWithAge")]
    partial class NewDataMigrationWithAge
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4ac7828c-ef30-4c65-940e-bb18acf76501",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "64c54c4e-9602-41cb-ba53-952f4b9830dc",
                            RoleId = "4ac7828c-ef30-4c65-940e-bb18acf76501"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AchievementsDb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DefaultBillingId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FavoriteGame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "64c54c4e-9602-41cb-ba53-952f4b9830dc",
                            AccessFailedCount = 0,
                            AchievementsDb = "",
                            Address = "",
                            ConcurrencyStamp = "d7747be3-26b7-4e77-848d-dd6ebc480a04",
                            Email = "admin@videogameshop.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VIDEOGAMESHOP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEKV2bqtLr+lHasOuoh3+sckufzR+e0Vxo1+NqEgWqyhldiS54tiUh6+EmDbOq87hbQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2e05cc2b-f3f0-4304-911d-4d5c27d131e3",
                            TotalGamesPlayed = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "01fa5f64-6144-4f1d-ba71-114618795cb1",
                            AccessFailedCount = 0,
                            AchievementsDb = "",
                            Address = "",
                            ConcurrencyStamp = "8e1da912-18d3-4f9f-aa4e-19ea58b4af4a",
                            Email = "user@videogameshop.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@VIDEOGAMESHOP.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAECkaix0i0MoNa5dHxIlJPTXcBD1KFHF8Vub5JU7lsbJClR0P+xfSyDmk1f2wd939lA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "308cb49b-4cb2-4aea-8e9f-ed1eeb02a6b8",
                            TotalGamesPlayed = 0,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeRatingId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Developer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ESRBContentDescriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMultiplayerSupport")
                        .HasColumnType("bit");

                    b.Property<string>("MinimumSystemRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLocalPlayers")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RecommendedSystemRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRatingId = 4,
                            AverageRating = 4.7999999999999998,
                            CoverImage = "https://media.thenerdstash.com/wp-content/uploads/2022/12/GOG-Winter-Sale.jpg.webp",
                            CreatedAt = new DateTime(2023, 9, 23, 13, 0, 7, 51, DateTimeKind.Utc).AddTicks(3483),
                            Description = "The Witcher 3: Wild Hunt is a role-playing game set in an open-world fantasy universe.",
                            Developer = "CD Projekt Red",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 7 or 8 (64-bit), Processor: Intel Core i5-2500K 3.3 GHz or AMD Phenom II X4 940, Memory: 6 GB RAM, Graphics: NVIDIA GeForce GTX 660 or AMD Radeon HD 7870, Storage: 35 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 29.99m,
                            RecommendedSystemRequirements = "OS: Windows 7 or 8 (64-bit), Processor: Intel Core i7-3770 3.4 GHz or AMD FX-8350 4 GHz, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 770 or AMD Radeon R9 290, Storage: 35 GB available space",
                            ReleaseDate = new DateTime(2015, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Witcher 3: Wild Hunt",
                            TrailerUrl = "https://www.youtube.com/watch?v=c0i88t0Kacs",
                            UpdatedAt = new DateTime(2023, 9, 23, 13, 0, 7, 51, DateTimeKind.Utc).AddTicks(3486)
                        },
                        new
                        {
                            Id = 2,
                            AgeRatingId = 3,
                            AverageRating = 4.9000000000000004,
                            CoverImage = "https://cdn.cloudflare.steamstatic.com/steam/apps/1174180/capsule_sm_120.jpg?t=1677747900",
                            CreatedAt = new DateTime(2023, 9, 23, 13, 0, 7, 51, DateTimeKind.Utc).AddTicks(3501),
                            Description = "Red Dead Redemption 2 is an epic tale of life in America's unforgiving heartland.",
                            Developer = "Rockstar Games",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows 7, Processor: Intel Core i5-2500K / AMD FX-6300, Memory: 8 GB RAM, Graphics: Nvidia GTX 770 2GB / AMD Radeon R9 280 3GB, Storage: 150 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 59.99m,
                            RecommendedSystemRequirements = "OS: Windows 10, Processor: Intel Core i7-4770K / AMD Ryzen 5 1500X, Memory: 12 GB RAM, Graphics: Nvidia GeForce GTX 1060 6GB / AMD Radeon RX 480 4GB, Storage: 150 GB available space",
                            ReleaseDate = new DateTime(2018, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Red Dead Redemption 2",
                            TrailerUrl = "https://www.youtube.com/watch?v=eaW0tYpxyp0",
                            UpdatedAt = new DateTime(2023, 9, 23, 13, 0, 7, 51, DateTimeKind.Utc).AddTicks(3502)
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.GameImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            Url = "https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/5/13/1431520130189/8bfad8ae-5a24-4617-988e-ccafee83324f-1020x612.jpeg?width=700&quality=85&auto=format&fit=max&s=8a7d3e78ea1329d9442f2b175bc7eb14"
                        },
                        new
                        {
                            Id = 2,
                            GameId = 1,
                            Url = "https://s1.dmcdn.net/v/7dQua1X-34xfWvryS/x1080"
                        },
                        new
                        {
                            Id = 3,
                            GameId = 1,
                            Url = "https://venturebeat.com/wp-content/uploads/2022/12/witcher-5.jpg?w=791&resize=1200%2C910&strip=all"
                        },
                        new
                        {
                            Id = 4,
                            GameId = 1,
                            Url = "https://media.thenerdstash.com/wp-content/uploads/2022/12/GOG-Winter-Sale.jpg.webp"
                        },
                        new
                        {
                            Id = 5,
                            GameId = 1,
                            Url = "https://assetsio.reedpopcdn.com/Site_qTBBJD0.jpg?width=1600&height=900&fit=crop&quality=100&format=png&enable=upscale&auto=webp"
                        },
                        new
                        {
                            Id = 6,
                            GameId = 2,
                            Url = "https://link-to-first-image-for-RDR2.com"
                        },
                        new
                        {
                            Id = 7,
                            GameId = 2,
                            Url = "https://link-to-second-image-for-RDR2.com"
                        },
                        new
                        {
                            Id = 8,
                            GameId = 2,
                            Url = "https://link-to-third-image-for-RDR2.com"
                        },
                        new
                        {
                            Id = 9,
                            GameId = 2,
                            Url = "https://link-to-four-image-for-RDR2.com"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BillingId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BillingId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BillingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CardExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardLastFourDigits")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BillingId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("GameId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.AgeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeRatings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Rating = "E - Everyone"
                        },
                        new
                        {
                            Id = 2,
                            Rating = "E10+ - Everyone 10 and older"
                        },
                        new
                        {
                            Id = 3,
                            Rating = "T - Teen"
                        },
                        new
                        {
                            Id = 4,
                            Rating = "M - Mature"
                        },
                        new
                        {
                            Id = 5,
                            Rating = "AO - Adults Only"
                        },
                        new
                        {
                            Id = 6,
                            Rating = "RP - Rating Pending"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("DLCName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int?>("MainDLCImageId")
                        .HasColumnType("int");

                    b.Property<string>("MinimumSystemRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedSystemRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("MainDLCImageId");

                    b.ToTable("DLCs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 4.7999999999999998,
                            DLCName = "The Witcher 3: Hearts of Stone",
                            Description = "Embark on a new adventure as Geralt of Rivia in the Hearts of Stone expansion.",
                            Developer = "CD Projekt",
                            GameId = 1,
                            MinimumSystemRequirements = "OS: 64-bit Windows 7, CPU: Intel CPU Core i5-2500K 3.3GHz, RAM: 6GB, Graphics: Nvidia GPU GeForce GTX 660 / AMD GPU Radeon HD 7870",
                            Price = 9.99m,
                            Publisher = "CD Projekt",
                            RecommendedSystemRequirements = "OS: 64-bit Windows 7, CPU: Intel CPU Core i7 3770 3.4 GHz, RAM: 8GB, Graphics: Nvidia GPU GeForce GTX 770 / AMD GPU Radeon R9 290",
                            ReleaseDate = new DateTime(2015, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerUrl = "https://www.youtube.com/watch?v=ffdxS9R6NTE"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLCImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DLCId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.ToTable("DLCImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "The Witcher 3: Hearts of Stone DLC Image 1",
                            DLCId = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/witcher/images/0/09/Tw3_expansion_pack_hos.jpg/revision/latest?cb=20150908190146"
                        },
                        new
                        {
                            Id = 2,
                            Caption = "The Witcher 3: Hearts of Stone DLC Image 2",
                            DLCId = 1,
                            ImageUrl = "https://example.com/path_to_second_image.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Caption = "The Witcher 3: Hearts of Stone DLC Image 3",
                            DLCId = 1,
                            ImageUrl = "https://example.com/path_to_third_image.jpg"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            GameId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            GameId = 2,
                            GenreId = 1
                        },
                        new
                        {
                            GameId = 2,
                            GenreId = 2
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GamePlatform", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = 1,
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = 1,
                            PlatformId = 3
                        },
                        new
                        {
                            GameId = 2,
                            PlatformId = 1
                        },
                        new
                        {
                            GameId = 2,
                            PlatformId = 2
                        },
                        new
                        {
                            GameId = 2,
                            PlatformId = 3
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "RPG"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Puzzle"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Shooter"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Platformer"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 12,
                            Name = "Racing"
                        },
                        new
                        {
                            Id = 13,
                            Name = "Music"
                        },
                        new
                        {
                            Id = 14,
                            Name = "Educational"
                        },
                        new
                        {
                            Id = 15,
                            Name = "Card & Board"
                        },
                        new
                        {
                            Id = 16,
                            Name = "Survival"
                        },
                        new
                        {
                            Id = 17,
                            Name = "Stealth"
                        },
                        new
                        {
                            Id = 18,
                            Name = "MMORPG"
                        },
                        new
                        {
                            Id = 19,
                            Name = "Battle Royale"
                        },
                        new
                        {
                            Id = 20,
                            Name = "Sandbox"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DLCId")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.HasIndex("GameId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageName = "English"
                        },
                        new
                        {
                            Id = 2,
                            LanguageName = "Spanish"
                        },
                        new
                        {
                            Id = 3,
                            LanguageName = "French"
                        },
                        new
                        {
                            Id = 4,
                            LanguageName = "German"
                        },
                        new
                        {
                            Id = 5,
                            LanguageName = "Japanese"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = 3,
                            Name = "PS4"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = 5,
                            Name = "PS5"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Xbox X"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("backend.Models.Payments.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("backend.Models.Product.GameGameTag", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GameTagId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GameTagId");

                    b.HasIndex("GameTagId");

                    b.ToTable("GameGameTags");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            GameTagId = 1
                        },
                        new
                        {
                            GameId = 1,
                            GameTagId = 2
                        },
                        new
                        {
                            GameId = 1,
                            GameTagId = 3
                        },
                        new
                        {
                            GameId = 2,
                            GameTagId = 1
                        },
                        new
                        {
                            GameId = 2,
                            GameTagId = 2
                        },
                        new
                        {
                            GameId = 2,
                            GameTagId = 3
                        });
                });

            modelBuilder.Entity("backend.Models.Product.GameLanguage", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "LanguageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GameLanguages");

                    b.HasData(
                        new
                        {
                            GameId = 1,
                            LanguageId = 1
                        },
                        new
                        {
                            GameId = 1,
                            LanguageId = 2
                        },
                        new
                        {
                            GameId = 1,
                            LanguageId = 3
                        },
                        new
                        {
                            GameId = 1,
                            LanguageId = 4
                        },
                        new
                        {
                            GameId = 1,
                            LanguageId = 5
                        },
                        new
                        {
                            GameId = 2,
                            LanguageId = 1
                        },
                        new
                        {
                            GameId = 2,
                            LanguageId = 2
                        },
                        new
                        {
                            GameId = 2,
                            LanguageId = 3
                        },
                        new
                        {
                            GameId = 2,
                            LanguageId = 4
                        },
                        new
                        {
                            GameId = 2,
                            LanguageId = 5
                        });
                });

            modelBuilder.Entity("backend.Models.Product.GameTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Open World"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Multiplayer"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Single Player"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Fantasy"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "Sci-Fi"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "Horror"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Action-Adventure"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Racing"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "Sports"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Simulation"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Strategy"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Role-Playing"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "Puzzle"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "Platformer"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "Shooter"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Survival"
                        });
                });

            modelBuilder.Entity("backend.Models.User.UserFriend", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.AgeRating", "AgeRating")
                        .WithMany("Games")
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany("GameLibrary")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("AgeRating");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.GameImage", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameImages")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("backend.Models.Payments.Billing", "Billing")
                        .WithMany("Orders")
                        .HasForeignKey("BillingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.OrderItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("OrderItems")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payment", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.PaymentMethod", b =>
                {
                    b.HasOne("backend.Models.Payments.Billing", "Billing")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("BillingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("VideoGameAppBackend.Models.Payments.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.CartItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Payments.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("DLCs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.DLCImage", "MainDLCImage")
                        .WithMany()
                        .HasForeignKey("MainDLCImageId");

                    b.Navigation("Game");

                    b.Navigation("MainDLCImage");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLCImage", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.DLC", "DLC")
                        .WithMany("DLCGallery")
                        .HasForeignKey("DLCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DLC");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GameGenre", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GamePlatform", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Language", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.DLC", null)
                        .WithMany("SupportedLanguages")
                        .HasForeignKey("DLCId");

                    b.HasOne("VideoGameAppBackend.Models.Game", null)
                        .WithMany("SupportedLanguages")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Review", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishlistItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.WishList", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("backend.Models.Payments.Billing", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithOne("DefaultBillingDetails")
                        .HasForeignKey("backend.Models.Payments.Billing", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Product.GameGameTag", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameGameTags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Product.GameTag", "GameTag")
                        .WithMany("GameGameTags")
                        .HasForeignKey("GameTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameTag");
                });

            modelBuilder.Entity("backend.Models.Product.GameLanguage", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameLanguages")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.Language", "Language")
                        .WithMany("GameLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("backend.Models.User.UserFriend", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("UserFriends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("DefaultBillingDetails");

                    b.Navigation("GameLibrary");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserFriends");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.Navigation("DLCs");

                    b.Navigation("GameGameTags");

                    b.Navigation("GameGenres");

                    b.Navigation("GameImages");

                    b.Navigation("GameLanguages");

                    b.Navigation("GamePlatforms");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("SupportedLanguages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.AgeRating", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.Navigation("DLCGallery");

                    b.Navigation("SupportedLanguages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Language", b =>
                {
                    b.Navigation("GameLanguages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("backend.Models.Payments.Billing", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("backend.Models.Product.GameTag", b =>
                {
                    b.Navigation("GameGameTags");
                });
#pragma warning restore 612, 618
        }
    }
}
