// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VideoGameAppBackend.Data;

#nullable disable

namespace VideoGameBackend.Migrations
{
    [DbContext(typeof(GameDbContext))]
    [Migration("20230922174506_NewDLCSeedingData")]
    partial class NewDLCSeedingData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "eecb3f97-e33d-46d2-a495-eb2d9443caca",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b7f5d93a-680c-44dc-b717-beabb49f8052",
                            RoleId = "eecb3f97-e33d-46d2-a495-eb2d9443caca"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("AchievementsDb")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("DefaultBillingId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FavoriteGame")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("int");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b7f5d93a-680c-44dc-b717-beabb49f8052",
                            AccessFailedCount = 0,
                            AchievementsDb = "",
                            Address = "",
                            ConcurrencyStamp = "acea6ccf-bf88-4bb9-bf01-c0f7fa78245e",
                            Email = "admin@videogameshop.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VIDEOGAMESHOP.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAIAAYagAAAAEDRvF1xxkfObHYgYWQzZOlYO6l7+BwEZHdSjeMNhOOFSf/WRqIeSV0qBfkyMdnZZ0A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f76ab8c3-0f6e-4af0-8a63-4069e0249963",
                            TotalGamesPlayed = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
                            Id = "3054e0e2-31a7-4e00-8fb8-2f5a8a7798b3",
                            AccessFailedCount = 0,
                            AchievementsDb = "",
                            Address = "",
                            ConcurrencyStamp = "fd6a8bb8-c18e-4dec-aba3-3ef53993eddd",
                            Email = "user@videogameshop.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@VIDEOGAMESHOP.COM",
                            NormalizedUserName = "USER",
                            PasswordHash = "AQAAAAIAAYagAAAAEFvRaZNYHq/BuQ81ZWWjaV3zg7JEIKyYVDx0CZibeZeTLB1j89ZQleMRFN/a4D+nSQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b68a3272-b63d-4e1e-8d02-22e1633c0c29",
                            TotalGamesPlayed = 0,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeRatingId")
                        .HasColumnType("int");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("CoverImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Developer")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ESRBContentDescriptions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasMultiplayerSupport")
                        .HasColumnType("bit");

                    b.Property<string>("MinimumSystemRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfLocalPlayers")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("RecommendedSystemRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRatingId = 2,
                            AverageRating = 4.7999999999999998,
                            CoverImage = "https://media.thenerdstash.com/wp-content/uploads/2022/12/GOG-Winter-Sale.jpg.webp",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7223),
                            Description = "The Witcher 3: Wild Hunt is a role-playing game set in an open-world fantasy universe.",
                            Developer = "CD Projekt Red",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 7 or 8 (64-bit), Processor: Intel Core i5-2500K 3.3 GHz or AMD Phenom II X4 940, Memory: 6 GB RAM, Graphics: NVIDIA GeForce GTX 660 or AMD Radeon HD 7870, Storage: 35 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 29.99m,
                            RecommendedSystemRequirements = "OS: Windows 7 or 8 (64-bit), Processor: Intel Core i7-3770 3.4 GHz or AMD FX-8350 4 GHz, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 770 or AMD Radeon R9 290, Storage: 35 GB available space",
                            ReleaseDate = new DateTime(2015, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Witcher 3: Wild Hunt",
                            TrailerUrl = "https://www.youtube.com/watch?v=c0i88t0Kacs",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7227)
                        },
                        new
                        {
                            Id = 2,
                            AgeRatingId = 2,
                            AverageRating = 4.9000000000000004,
                            CoverImage = "https://www.rockstargames.com/reddeadredemption2/rockstar_games/r_d_r_logo.jpg",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7252),
                            Description = "Red Dead Redemption 2 is an action-adventure game set in the Wild West.",
                            Developer = "Rockstar Games",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows 7 (64-bit), Processor: Intel Core i5-2500K, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 770, Storage: 150 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 49.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i7-4770K, Memory: 12 GB RAM, Graphics: NVIDIA GeForce GTX 1060, Storage: 150 GB available space",
                            ReleaseDate = new DateTime(2018, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Red Dead Redemption 2",
                            TrailerUrl = "https://www.youtube.com/watch?v=eaW0tYpxyp0",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7252)
                        },
                        new
                        {
                            Id = 3,
                            AgeRatingId = 2,
                            AverageRating = 4.0,
                            CoverImage = "https://www.cyberpunk.net/build/images/home/title-c-logo-8d1c4e3341.svg",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7256),
                            Description = "Cyberpunk 2077 is a role-playing video game developed and published by CD Projekt.",
                            Developer = "CD Projekt Red",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 7 (64-bit), Processor: Intel Core i5-3570K, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 780, Storage: 70 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 59.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i7-4790, Memory: 16 GB RAM, Graphics: NVIDIA GeForce GTX 1060, Storage: 70 GB available space",
                            ReleaseDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cyberpunk 2077",
                            TrailerUrl = "https://www.youtube.com/watch?v=vjF9GgrY9c0",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7257)
                        },
                        new
                        {
                            Id = 4,
                            AgeRatingId = 2,
                            AverageRating = 4.5,
                            CoverImage = "https://bethesda.net/game/doom2016",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7261),
                            Description = "Doom Eternal is a first-person shooter video game developed by id Software and published by Bethesda Softworks.",
                            Developer = "id Software",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 7 (64-bit), Processor: Intel Core i5-2400, Memory: 8 GB RAM, Graphics: NVIDIA GTX 670, Storage: 50 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 39.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i7-6700K, Memory: 8 GB RAM, Graphics: NVIDIA GTX 1060, Storage: 50 GB available space",
                            ReleaseDate = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Doom Eternal",
                            TrailerUrl = "https://www.youtube.com/watch?v=FkklG9MA0vM",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7261)
                        },
                        new
                        {
                            Id = 5,
                            AgeRatingId = 2,
                            AverageRating = 4.5999999999999996,
                            CoverImage = "https://www.ubisoft.com/en-gb/game/assassins-creed/valhalla",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7265),
                            Description = "Assassin's Creed Valhalla is an action role-playing video game developed by Ubisoft Montreal.",
                            Developer = "Ubisoft",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i5-4460, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 960, Storage: 50 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 49.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i7-6700, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 1080, Storage: 50 GB available space",
                            ReleaseDate = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Assassin's Creed Valhalla",
                            TrailerUrl = "https://www.youtube.com/watch?v=SSYlfRq4ysA",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7265)
                        },
                        new
                        {
                            Id = 6,
                            AgeRatingId = 2,
                            AverageRating = 4.7000000000000002,
                            CoverImage = "https://www.elderscrolls.com/skyrim",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7269),
                            Description = "The Elder Scrolls V: Skyrim is an open-world action role-playing game set in the fantasy world of Tamriel.",
                            Developer = "Bethesda Game Studios",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 7/Vista/XP PC (32 or 64 bit), Processor: Dual-core processor 2.0 GHz, Memory: 2GB RAM, Graphics: DirectX 9.0c compatible NVIDIA or AMD ATI video card with 1GB of RAM, Storage: 6GB of HDD space",
                            NumberOfLocalPlayers = 1,
                            Price = 39.99m,
                            RecommendedSystemRequirements = "OS: Windows 7/Vista/XP PC (32 or 64 bit), Processor: Quad-core Intel or AMD CPU, Memory: 4GB System RAM, Graphics: DirectX 9.0c compatible NVIDIA or AMD ATI video card with 1GB of RAM (Nvidia GeForce GTX 260 or higher; ATI Radeon 4890 or higher), Storage: 6GB of HDD space",
                            ReleaseDate = new DateTime(2011, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Elder Scrolls V: Skyrim",
                            TrailerUrl = "https://www.youtube.com/watch?v=PjqsYzBrP-M",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7270)
                        },
                        new
                        {
                            Id = 7,
                            AgeRatingId = 4,
                            AverageRating = 4.7999999999999998,
                            CoverImage = "https://www.rockstargames.com/V",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7273),
                            Description = "Grand Theft Auto V is an action-adventure game set in the fictional state of San Andreas.",
                            Developer = "Rockstar North",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows 7 64-bit, Processor: Intel Core 2 Quad CPU Q6600 @ 2.40GHz (4 CPUs) / AMD Phenom 9850 Quad-Core Processor (4 CPUs) @ 2.5GHz, Memory: 4 GB RAM, Graphics: NVIDIA 9800 GT 1GB / AMD HD 4870 1GB (DX 10, 10.1, 11), Storage: 72 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 29.99m,
                            RecommendedSystemRequirements = "OS: Windows 8.1 64 Bit, Windows 8 64 Bit, Windows 7 64 Bit Service Pack 1, Processor: Intel Core i5 3470 @ 3.2GHz (4 CPUs) / AMD X8 FX-8350 @ 4GHz (8 CPUs), Memory: 8 GB RAM, Graphics: NVIDIA GTX 660 2GB / AMD HD 7870 2GB, Storage: 72 GB available space",
                            ReleaseDate = new DateTime(2013, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Grand Theft Auto V",
                            TrailerUrl = "https://www.youtube.com/watch?v=QkkoHAzjnUs",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7273)
                        },
                        new
                        {
                            Id = 8,
                            AgeRatingId = 1,
                            AverageRating = 4.5999999999999996,
                            CoverImage = "https://www.minecraft.net/en-us/",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7277),
                            Description = "Minecraft is a sandbox construction game that allows players to build and explore their own virtual worlds.",
                            Developer = "Mojang Studios",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows 7 and up, Processor: Intel Core i3-3210 3.2 GHz / AMD A8-7600 APU 3.1 GHz or equivalent, Memory: 4 GB RAM, Graphics: Integrated: Intel HD Graphics 4000 (Ivy Bridge) or AMD Radeon R5 series (Kaveri line) with OpenGL 4.4, Storage: 4GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 19.99m,
                            RecommendedSystemRequirements = "OS: Windows 10, Processor: Intel Core i5-4690 3.5GHz / AMD A10-7800 APU 3.5 GHz or equivalent, Memory: 8 GB RAM, Graphics: GeForce 700 Series or AMD Radeon Rx 200 Series (excluding integrated chipsets) with OpenGL 4.5, Storage: 4GB available space",
                            ReleaseDate = new DateTime(2011, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Minecraft",
                            TrailerUrl = "https://www.youtube.com/watch?v=OgH_qvqjBf0",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7277)
                        },
                        new
                        {
                            Id = 9,
                            AgeRatingId = 1,
                            AverageRating = 4.9000000000000004,
                            CoverImage = "https://www.zelda.com/breath-of-the-wild/",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7281),
                            Description = "The Legend of Zelda: Breath of the Wild is an action-adventure game set in the fantasy world of Hyrule.",
                            Developer = "Nintendo",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: N/A (Nintendo Switch), Processor: N/A (Nintendo Switch), Memory: N/A (Nintendo Switch), Graphics: N/A (Nintendo Switch), Storage: N/A (Nintendo Switch)",
                            NumberOfLocalPlayers = 1,
                            Price = 59.99m,
                            RecommendedSystemRequirements = "OS: N/A (Nintendo Switch), Processor: N/A (Nintendo Switch), Memory: N/A (Nintendo Switch), Graphics: N/A (Nintendo Switch), Storage: N/A (Nintendo Switch)",
                            ReleaseDate = new DateTime(2017, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Legend of Zelda: Breath of the Wild",
                            TrailerUrl = "https://www.youtube.com/watch?v=zw47_q9wbBE",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7281)
                        },
                        new
                        {
                            Id = 10,
                            AgeRatingId = 3,
                            AverageRating = 4.7000000000000002,
                            CoverImage = "https://playoverwatch.com/en-us/",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7286),
                            Description = "Overwatch is a team-based multiplayer first-person shooter game.",
                            Developer = "Blizzard Entertainment",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows 7/8/10 64-bit, Processor: Intel Core i3, Memory: 4 GB RAM, Graphics: NVIDIA GeForce GTX 460 / ATI Radeon HD 4850 / Intel HD Graphics 4400, Storage: 30 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 29.99m,
                            RecommendedSystemRequirements = "OS: Windows 7/8/10 64-bit, Processor: Intel Core i5, Memory: 6 GB RAM, Graphics: NVIDIA GeForce GTX 660 / AMD Radeon HD 7950, Storage: 30 GB available space",
                            ReleaseDate = new DateTime(2016, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Overwatch",
                            TrailerUrl = "https://www.youtube.com/watch?v=FqnKB22pOC0",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7286)
                        },
                        new
                        {
                            Id = 11,
                            AgeRatingId = 3,
                            AverageRating = 4.4000000000000004,
                            CoverImage = "https://www.halowaypoint.com/en-us/games/halo-infinite",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7289),
                            Description = "Halo: Infinite is a first-person shooter game and the latest installment in the Halo series.",
                            Developer = "343 Industries",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows 10, Processor: Intel Core i5-4440, Memory: 8 GB RAM, Graphics: NVIDIA GTX 660, Storage: 50 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 59.99m,
                            RecommendedSystemRequirements = "OS: Windows 10, Processor: Intel Core i7-9700K, Memory: 16 GB RAM, Graphics: NVIDIA GTX 1080, Storage: 50 GB available space",
                            ReleaseDate = new DateTime(2021, 12, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Halo: Infinite",
                            TrailerUrl = "https://www.youtube.com/watch?v=HZtc5-syeAk",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7290)
                        },
                        new
                        {
                            Id = 12,
                            AgeRatingId = 1,
                            AverageRating = 4.9000000000000004,
                            CoverImage = "https://www.stardewvalley.net/",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7293),
                            Description = "Stardew Valley is a farming simulation game that allows players to build and manage their own farm.",
                            Developer = "ConcernedApe",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows Vista or greater, Processor: 2 Ghz, Memory: 2 GB RAM, Graphics: 256 mb video memory, DirectX 10, Storage: 500 MB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 14.99m,
                            RecommendedSystemRequirements = "OS: Windows 7 or greater, Processor: 2.8 Ghz, Memory: 4 GB RAM, Graphics: 512 mb video memory, DirectX 10, Storage: 500 MB available space",
                            ReleaseDate = new DateTime(2016, 2, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Stardew Valley",
                            TrailerUrl = "https://www.youtube.com/watch?v=ot7uXNQskhs",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7294)
                        },
                        new
                        {
                            Id = 13,
                            AgeRatingId = 8,
                            AverageRating = 4.7000000000000002,
                            CoverImage = "https://www.ea.com/games/fifa/fifa-22",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7297),
                            Description = "FIFA 22 is a sports simulation game featuring soccer/football.",
                            Developer = "EA Sports",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows 10 - 64-Bit, Processor: Athlon X4 880K @4GHz or better/Core i3-6100 @3.7GHz or better, Memory: 8 GB RAM, Graphics: Radeon HD 7850 or better/GeForce GTX 660 or better, Storage: 50 GB available space",
                            NumberOfLocalPlayers = 2,
                            Price = 49.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 - 64-Bit, Processor: FX 8150 @3.6GHz or better/Core i5-3550 @3.40GHz or better, Memory: 8 GB RAM, Graphics: Radeon R9 270x or better/GeForce GTX 670 or better, Storage: 50 GB available space",
                            ReleaseDate = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "FIFA 22",
                            TrailerUrl = "https://www.youtube.com/watch?v=I66Dw9t7kgA",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7297)
                        },
                        new
                        {
                            Id = 14,
                            AgeRatingId = 1,
                            AverageRating = 4.5,
                            CoverImage = "https://www.ea.com/games/the-sims/the-sims-4",
                            CreatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7350),
                            Description = "The Sims 4 is a life simulation game that allows players to create and control virtual people and their lives.",
                            Developer = "Maxis",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows XP, Processor: 1.8 GHz Intel Core 2 Duo / AMD Athlon 64 Dual-Core 4000+ or equivalent, Memory: 4 GB RAM, Graphics: Intel HD Graphics 3000 or better, Storage: 15 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 39.99m,
                            RecommendedSystemRequirements = "OS: Windows 7/8/8.1/10, Processor: Intel Core i5-750 / AMD Athlon X4, Memory: 4 GB RAM, Graphics: NVIDIA GeForce GTX 650 or better, Storage: 18 GB available space",
                            ReleaseDate = new DateTime(2014, 9, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Sims 4",
                            TrailerUrl = "https://www.youtube.com/watch?v=R4l0u0Bw6Iw",
                            UpdatedAt = new DateTime(2023, 9, 22, 17, 45, 6, 244, DateTimeKind.Utc).AddTicks(7351)
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.GameImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GameId = 1,
                            Url = "https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/5/13/1431520130189/8bfad8ae-5a24-4617-988e-ccafee83324f-1020x612.jpeg?width=700&quality=85&auto=format&fit=max&s=8a7d3e78ea1329d9442f2b175bc7eb14"
                        },
                        new
                        {
                            Id = 2,
                            GameId = 1,
                            Url = "https://s1.dmcdn.net/v/7dQua1X-34xfWvryS/x1080"
                        },
                        new
                        {
                            Id = 3,
                            GameId = 1,
                            Url = "https://venturebeat.com/wp-content/uploads/2022/12/witcher-5.jpg?w=791&resize=1200%2C910&strip=all"
                        },
                        new
                        {
                            Id = 4,
                            GameId = 1,
                            Url = "https://media.thenerdstash.com/wp-content/uploads/2022/12/GOG-Winter-Sale.jpg.webp"
                        },
                        new
                        {
                            Id = 5,
                            GameId = 1,
                            Url = "https://assetsio.reedpopcdn.com/Site_qTBBJD0.jpg?width=1600&height=900&fit=crop&quality=100&format=png&enable=upscale&auto=webp"
                        },
                        new
                        {
                            Id = 6,
                            GameId = 2,
                            Url = "https://link-to-first-image-for-RDR2.com"
                        },
                        new
                        {
                            Id = 7,
                            GameId = 2,
                            Url = "https://link-to-second-image-for-RDR2.com"
                        },
                        new
                        {
                            Id = 8,
                            GameId = 3,
                            Url = "https://link-to-first-image-for-cyberpunk2077.com"
                        },
                        new
                        {
                            Id = 9,
                            GameId = 3,
                            Url = "https://link-to-second-image-for-cyberpunk2077.com"
                        },
                        new
                        {
                            Id = 10,
                            GameId = 4,
                            Url = "https://link-to-first-image-for-doom-eternal.com"
                        },
                        new
                        {
                            Id = 11,
                            GameId = 4,
                            Url = "https://link-to-second-image-for-doom-eternal.com"
                        },
                        new
                        {
                            Id = 12,
                            GameId = 5,
                            Url = "https://link-to-first-image-for-AC-valhalla.com"
                        },
                        new
                        {
                            Id = 13,
                            GameId = 5,
                            Url = "https://link-to-second-image-for-AC-valhalla.com"
                        },
                        new
                        {
                            Id = 14,
                            GameId = 6,
                            Url = "https://link-to-first-image-for-Skyrim.com"
                        },
                        new
                        {
                            Id = 15,
                            GameId = 6,
                            Url = "https://link-to-second-image-for-Skyrim.com"
                        },
                        new
                        {
                            Id = 16,
                            GameId = 7,
                            Url = "https://res.cloudinary.com/danedskby/image/upload/v1687633009/VideoGameShop/Horizon%20Forbidden%20West/Games-Horizon-Forbidden-West-Review-top_q8ujyy.webp"
                        },
                        new
                        {
                            Id = 17,
                            GameId = 7,
                            Url = "https://res.cloudinary.com/danedskby/image/upload/v1687633009/VideoGameShop/Horizon%20Forbidden%20West/Games-Horizon-Forbidden-West-Review-top_q8ujyy.webp"
                        },
                        new
                        {
                            Id = 18,
                            GameId = 8,
                            Url = "https://link-to-first-image-for-Minecraft.com"
                        },
                        new
                        {
                            Id = 19,
                            GameId = 8,
                            Url = "https://link-to-second-image-for-Minecraft.com"
                        },
                        new
                        {
                            Id = 20,
                            GameId = 9,
                            Url = "https://link-to-first-image-for-Zelda.com"
                        },
                        new
                        {
                            Id = 21,
                            GameId = 9,
                            Url = "https://link-to-second-image-for-Zelda.com"
                        },
                        new
                        {
                            Id = 22,
                            GameId = 10,
                            Url = "https://link-to-first-image-for-Overwatch.com"
                        },
                        new
                        {
                            Id = 23,
                            GameId = 10,
                            Url = "https://link-to-second-image-for-Overwatch.com"
                        },
                        new
                        {
                            Id = 24,
                            GameId = 11,
                            Url = "https://link-to-first-image-for-Halo-Infinite.com"
                        },
                        new
                        {
                            Id = 25,
                            GameId = 11,
                            Url = "https://link-to-second-image-for-Halo-Infinite.com"
                        },
                        new
                        {
                            Id = 26,
                            GameId = 12,
                            Url = "https://link-to-first-image-for-Stardew-Valley.com"
                        },
                        new
                        {
                            Id = 27,
                            GameId = 12,
                            Url = "https://link-to-second-image-for-Stardew-Valley.com"
                        },
                        new
                        {
                            Id = 28,
                            GameId = 13,
                            Url = "https://link-to-first-image-for-FIFA-22.com"
                        },
                        new
                        {
                            Id = 29,
                            GameId = 13,
                            Url = "https://link-to-second-image-for-FIFA-22.com"
                        },
                        new
                        {
                            Id = 30,
                            GameId = 14,
                            Url = "https://link-to-first-image-for-The-Sims-4.com"
                        },
                        new
                        {
                            Id = 31,
                            GameId = 14,
                            Url = "https://link-to-second-image-for-The-Sims-4.com"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("BillingId")
                        .HasColumnType("int");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BillingId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("BillingId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CardExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CardLastFourDigits")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)");

                    b.Property<int?>("CardType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BillingId");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("GameId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.AgeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AgeRatings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Rating = "Everyone"
                        },
                        new
                        {
                            Id = 2,
                            Rating = "Mature"
                        },
                        new
                        {
                            Id = 3,
                            Rating = "Teen"
                        },
                        new
                        {
                            Id = 4,
                            Rating = "Adults Only"
                        },
                        new
                        {
                            Id = 5,
                            Rating = "Everyone 10+"
                        },
                        new
                        {
                            Id = 6,
                            Rating = "Adults Only 18+"
                        },
                        new
                        {
                            Id = 7,
                            Rating = "Everyone 10+ with Cartoon Violence"
                        },
                        new
                        {
                            Id = 8,
                            Rating = "Mature 17+ with Blood and Gore, Intense Violence"
                        },
                        new
                        {
                            Id = 9,
                            Rating = "Teen 13+ with Mild Language, Violence"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageRating")
                        .HasColumnType("float");

                    b.Property<string>("DLCName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Developer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int?>("MainDLCImageId")
                        .HasColumnType("int");

                    b.Property<string>("MinimumSystemRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecommendedSystemRequirements")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrailerUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("MainDLCImageId");

                    b.ToTable("DLCs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AverageRating = 4.7999999999999998,
                            DLCName = "The Witcher 3: Hearts of Stone",
                            Description = "Embark on a new adventure as Geralt of Rivia in the Hearts of Stone expansion.",
                            Developer = "CD Projekt",
                            GameId = 1,
                            MinimumSystemRequirements = "OS: 64-bit Windows 7, CPU: Intel CPU Core i5-2500K 3.3GHz, RAM: 6GB, Graphics: Nvidia GPU GeForce GTX 660 / AMD GPU Radeon HD 7870",
                            Price = 9.99m,
                            Publisher = "CD Projekt",
                            RecommendedSystemRequirements = "OS: 64-bit Windows 7, CPU: Intel CPU Core i7 3770 3.4 GHz, RAM: 8GB, Graphics: Nvidia GPU GeForce GTX 770 / AMD GPU Radeon R9 290",
                            ReleaseDate = new DateTime(2015, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TrailerUrl = "https://www.youtube.com/watch?v=ffdxS9R6NTE"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLCImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DLCId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.ToTable("DLCImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "The Witcher 3: Hearts of Stone DLC Image 1",
                            DLCId = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/witcher/images/0/09/Tw3_expansion_pack_hos.jpg/revision/latest?cb=20150908190146"
                        },
                        new
                        {
                            Id = 2,
                            Caption = "The Witcher 3: Hearts of Stone DLC Image 2",
                            DLCId = 1,
                            ImageUrl = "https://example.com/path_to_second_image.jpg"
                        },
                        new
                        {
                            Id = 3,
                            Caption = "The Witcher 3: Hearts of Stone DLC Image 3",
                            DLCId = 1,
                            ImageUrl = "https://example.com/path_to_third_image.jpg"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GamePlatform", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("PlatformId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open World"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Role Playing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DLCId")
                        .HasColumnType("int");

                    b.Property<int?>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.HasIndex("GameId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 6,
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Nintendo Switch Lite"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Google Stadia"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("backend.Models.Payments.Billing", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Billings");
                });

            modelBuilder.Entity("backend.Models.Product.GameGameTag", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("GameTagId")
                        .HasColumnType("int");

                    b.HasKey("GameId", "GameTagId");

                    b.HasIndex("GameTagId");

                    b.ToTable("GameGameTags");
                });

            modelBuilder.Entity("backend.Models.Product.GameTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Fantasy"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Medieval"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Story Rich"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Sci-Fi"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "Post-Apocalyptic"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "Horror"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Survival"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Retro"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "Puzzle"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Platformer"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Shooter"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Strategy"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "RPG"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "VR"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "Multiplayer"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Singleplayer"
                        },
                        new
                        {
                            TagId = 17,
                            TagName = "Racing"
                        },
                        new
                        {
                            TagId = 18,
                            TagName = "Sports"
                        },
                        new
                        {
                            TagId = 19,
                            TagName = "Open World"
                        },
                        new
                        {
                            TagId = 20,
                            TagName = "Sandbox"
                        },
                        new
                        {
                            TagId = 21,
                            TagName = "City Builder"
                        },
                        new
                        {
                            TagId = 22,
                            TagName = "Management"
                        },
                        new
                        {
                            TagId = 23,
                            TagName = "Simulation"
                        },
                        new
                        {
                            TagId = 24,
                            TagName = "Turn-Based"
                        },
                        new
                        {
                            TagId = 25,
                            TagName = "Roguelike"
                        },
                        new
                        {
                            TagId = 26,
                            TagName = "Narrative"
                        },
                        new
                        {
                            TagId = 27,
                            TagName = "Visual Novel"
                        },
                        new
                        {
                            TagId = 28,
                            TagName = "Anime"
                        },
                        new
                        {
                            TagId = 29,
                            TagName = "Pixel Art"
                        },
                        new
                        {
                            TagId = 30,
                            TagName = "Crafting"
                        });
                });

            modelBuilder.Entity("backend.Models.User.UserFriend", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FriendId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.AgeRating", "AgeRating")
                        .WithMany("Games")
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany("GameLibrary")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("AgeRating");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.GameImage", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameImages")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("backend.Models.Payments.Billing", "Billing")
                        .WithMany("Orders")
                        .HasForeignKey("BillingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ApplicationUser");

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.OrderItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("OrderItems")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payment", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.PaymentMethod", b =>
                {
                    b.HasOne("backend.Models.Payments.Billing", "Billing")
                        .WithMany("PaymentMethods")
                        .HasForeignKey("BillingId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Billing");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("VideoGameAppBackend.Models.Payments.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.CartItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Payments.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("DLCs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.DLCImage", "MainDLCImage")
                        .WithMany()
                        .HasForeignKey("MainDLCImageId");

                    b.Navigation("Game");

                    b.Navigation("MainDLCImage");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLCImage", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.DLC", "DLC")
                        .WithMany("DLCGallery")
                        .HasForeignKey("DLCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DLC");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GameGenre", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GamePlatform", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Language", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.DLC", null)
                        .WithMany("SupportedLanguages")
                        .HasForeignKey("DLCId");

                    b.HasOne("VideoGameAppBackend.Models.Game", null)
                        .WithMany("SupportedLanguages")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Review", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishlistItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.WishList", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("backend.Models.Payments.Billing", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithOne("DefaultBillingDetails")
                        .HasForeignKey("backend.Models.Payments.Billing", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("backend.Models.Product.GameGameTag", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameGameTags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Product.GameTag", "GameTag")
                        .WithMany("GameGameTags")
                        .HasForeignKey("GameTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameTag");
                });

            modelBuilder.Entity("backend.Models.User.UserFriend", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("UserFriends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("DefaultBillingDetails");

                    b.Navigation("GameLibrary");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserFriends");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.Navigation("DLCs");

                    b.Navigation("GameGameTags");

                    b.Navigation("GameGenres");

                    b.Navigation("GameImages");

                    b.Navigation("GamePlatforms");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("SupportedLanguages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.AgeRating", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.Navigation("DLCGallery");

                    b.Navigation("SupportedLanguages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("backend.Models.Payments.Billing", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("PaymentMethods");
                });

            modelBuilder.Entity("backend.Models.Product.GameTag", b =>
                {
                    b.Navigation("GameGameTags");
                });
#pragma warning restore 612, 618
        }
    }
}
