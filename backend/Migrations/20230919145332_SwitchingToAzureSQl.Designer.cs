// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VideoGameAppBackend.Data;

#nullable disable

namespace VideoGameBackend.Migrations
{
    [DbContext(typeof(GameDbContext))]
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
    [Migration("20230917212741_initialCreate")]
    partial class initialCreate
========
    [Migration("20230919145332_SwitchingToAzureSQl")]
    partial class SwitchingToAzureSQl
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            Id = "bc5e02d0-2dbf-4315-a8bc-b1c245b72bf7",
========
                            Id = "f8f48ed7-ded6-47c4-8134-93995d0f9000",
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            UserId = "b5382978-5731-41d2-aceb-069d674323f1",
                            RoleId = "bc5e02d0-2dbf-4315-a8bc-b1c245b72bf7"
========
                            UserId = "9bb55382-5a52-48b7-8a9a-26cbda043876",
                            RoleId = "f8f48ed7-ded6-47c4-8134-93995d0f9000"
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("AchievementsDb")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FavoriteGame")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("TotalGamesPlayed")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            Id = "b5382978-5731-41d2-aceb-069d674323f1",
                            AccessFailedCount = 0,
                            AchievementsDb = "",
                            Address = "",
                            ConcurrencyStamp = "4d1e35d8-e137-4d52-bda6-ce7971ac3c5a",
========
                            Id = "9bb55382-5a52-48b7-8a9a-26cbda043876",
                            AccessFailedCount = 0,
                            AchievementsDb = "",
                            Address = "",
                            ConcurrencyStamp = "e521b526-d0ea-4895-a7d6-85f158b67a69",
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            Email = "admin@videogameshop.com",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@VIDEOGAMESHOP.COM",
                            NormalizedUserName = "ADMIN",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEJjdq1rZM9sphAJm08s4nTPrTL16s+xMKHDwYovPrWICfwhm6QMSKsmucO0GfmBXag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94137d90-7d26-4157-80d6-d83c7b2cf2d3",
========
                            PasswordHash = "AQAAAAIAAYagAAAAED/HoXsYbH8W1zz9MT8LzxbQWfO375ird2dt8SHm+RxSecu3+hapaHweMIBjME7lNw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f050224c-a964-4b8d-98f4-c3ee5cbe25af",
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            TotalGamesPlayed = 0,
                            TwoFactorEnabled = false,
                            UserName = "admin"
                        },
                        new
                        {
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            Id = "cbfe4045-e0db-4749-a914-7b683375fd79",
                            AccessFailedCount = 0,
                            AchievementsDb = "",
                            Address = "",
                            ConcurrencyStamp = "e8c549ad-d301-4a34-9e65-e3bcb6f49af6",
========
                            Id = "7a0f0592-2671-4cfb-bbbd-496001f118b9",
                            AccessFailedCount = 0,
                            AchievementsDb = "",
                            Address = "",
                            ConcurrencyStamp = "a17283bc-2f1b-4753-a575-7b3371236a6a",
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            Email = "user@videogameshop.com",
                            EmailConfirmed = true,
                            FirstName = "Regular",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@VIDEOGAMESHOP.COM",
                            NormalizedUserName = "USER",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            PasswordHash = "AQAAAAIAAYagAAAAEL2WduZxjp6zFHD94BGeufZapXaP2T3zG+tcMG/94JnpOCGmhcz9pJ96pBeK1rS7EA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "347dd64e-a3e0-4a1e-a26a-cde33d5b8071",
========
                            PasswordHash = "AQAAAAIAAYagAAAAEJxhE1QmdoC+SqLSJKXGCSD8M8NboPBRrk8MuXc5D388DsDlkezywImOSCm392aldQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e46fe43b-68fd-4c00-91d7-43c2c92d9771",
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            TotalGamesPlayed = 0,
                            TwoFactorEnabled = false,
                            UserName = "user"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AgeRatingId")
                        .HasColumnType("integer");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<double?>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<string>("CoverImage")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Developer")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ESRBContentDescriptions")
                        .HasColumnType("text");

                    b.Property<bool>("HasMultiplayerSupport")
                        .HasColumnType("boolean");

                    b.Property<string>("MinimumSystemRequirements")
                        .HasColumnType("text");

                    b.Property<int>("NumberOfLocalPlayers")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Publisher")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RecommendedSystemRequirements")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AgeRatingId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeRatingId = 2,
                            AverageRating = 4.7999999999999998,
                            CoverImage = "https://media.thenerdstash.com/wp-content/uploads/2022/12/GOG-Winter-Sale.jpg.webp",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            CreatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(953),
========
                            CreatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(47),
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            Description = "The Witcher 3: Wild Hunt is a role-playing game set in an open-world fantasy universe.",
                            Developer = "CD Projekt Red",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 7 or 8 (64-bit), Processor: Intel Core i5-2500K 3.3 GHz or AMD Phenom II X4 940, Memory: 6 GB RAM, Graphics: NVIDIA GeForce GTX 660 or AMD Radeon HD 7870, Storage: 35 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 29.99m,
                            RecommendedSystemRequirements = "OS: Windows 7 or 8 (64-bit), Processor: Intel Core i7-3770 3.4 GHz or AMD FX-8350 4 GHz, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 770 or AMD Radeon R9 290, Storage: 35 GB available space",
                            ReleaseDate = new DateTime(2015, 5, 19, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "The Witcher 3: Wild Hunt",
                            TrailerUrl = "https://www.youtube.com/watch?v=c0i88t0Kacs",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            UpdatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(957)
========
                            UpdatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(51)
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                        },
                        new
                        {
                            Id = 2,
                            AgeRatingId = 2,
                            AverageRating = 4.9000000000000004,
                            CoverImage = "https://www.rockstargames.com/reddeadredemption2/rockstar_games/r_d_r_logo.jpg",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            CreatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(986),
========
                            CreatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(138),
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            Description = "Red Dead Redemption 2 is an action-adventure game set in the Wild West.",
                            Developer = "Rockstar Games",
                            HasMultiplayerSupport = true,
                            MinimumSystemRequirements = "OS: Windows 7 (64-bit), Processor: Intel Core i5-2500K, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 770, Storage: 150 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 49.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i7-4770K, Memory: 12 GB RAM, Graphics: NVIDIA GeForce GTX 1060, Storage: 150 GB available space",
                            ReleaseDate = new DateTime(2018, 10, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Red Dead Redemption 2",
                            TrailerUrl = "https://www.youtube.com/watch?v=eaW0tYpxyp0",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            UpdatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(987)
========
                            UpdatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(139)
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                        },
                        new
                        {
                            Id = 3,
                            AgeRatingId = 2,
                            AverageRating = 4.0,
                            CoverImage = "https://www.cyberpunk.net/build/images/home/title-c-logo-8d1c4e3341.svg",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            CreatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(990),
========
                            CreatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(144),
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            Description = "Cyberpunk 2077 is a role-playing video game developed and published by CD Projekt.",
                            Developer = "CD Projekt Red",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 7 (64-bit), Processor: Intel Core i5-3570K, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 780, Storage: 70 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 59.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i7-4790, Memory: 16 GB RAM, Graphics: NVIDIA GeForce GTX 1060, Storage: 70 GB available space",
                            ReleaseDate = new DateTime(2020, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Cyberpunk 2077",
                            TrailerUrl = "https://www.youtube.com/watch?v=vjF9GgrY9c0",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            UpdatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(991)
========
                            UpdatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(144)
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                        },
                        new
                        {
                            Id = 4,
                            AgeRatingId = 2,
                            AverageRating = 4.5,
                            CoverImage = "https://bethesda.net/game/doom2016",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            CreatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(994),
========
                            CreatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(147),
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            Description = "Doom Eternal is a first-person shooter video game developed by id Software and published by Bethesda Softworks.",
                            Developer = "id Software",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 7 (64-bit), Processor: Intel Core i5-2400, Memory: 8 GB RAM, Graphics: NVIDIA GTX 670, Storage: 50 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 39.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i7-6700K, Memory: 8 GB RAM, Graphics: NVIDIA GTX 1060, Storage: 50 GB available space",
                            ReleaseDate = new DateTime(2020, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Doom Eternal",
                            TrailerUrl = "https://www.youtube.com/watch?v=FkklG9MA0vM",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            UpdatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(994)
========
                            UpdatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(148)
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                        },
                        new
                        {
                            Id = 5,
                            AgeRatingId = 2,
                            AverageRating = 4.5999999999999996,
                            CoverImage = "https://www.ubisoft.com/en-gb/game/assassins-creed/valhalla",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            CreatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(1072),
========
                            CreatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(151),
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                            Description = "Assassin's Creed Valhalla is an action role-playing video game developed by Ubisoft Montreal.",
                            Developer = "Ubisoft",
                            HasMultiplayerSupport = false,
                            MinimumSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i5-4460, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 960, Storage: 50 GB available space",
                            NumberOfLocalPlayers = 1,
                            Price = 49.99m,
                            RecommendedSystemRequirements = "OS: Windows 10 (64-bit), Processor: Intel Core i7-6700, Memory: 8 GB RAM, Graphics: NVIDIA GeForce GTX 1080, Storage: 50 GB available space",
                            ReleaseDate = new DateTime(2020, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Assassin's Creed Valhalla",
                            TrailerUrl = "https://www.youtube.com/watch?v=SSYlfRq4ysA",
<<<<<<<< HEAD:backend/Migrations/20230917212741_initialCreate.Designer.cs
                            UpdatedAt = new DateTime(2023, 9, 17, 21, 27, 41, 661, DateTimeKind.Utc).AddTicks(1072)
========
                            UpdatedAt = new DateTime(2023, 9, 19, 14, 53, 32, 368, DateTimeKind.Utc).AddTicks(152)
>>>>>>>> e668194:backend/Migrations/20230919145332_SwitchingToAzureSQl.Designer.cs
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.GameImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameImages");

                    b.HasData(
                        new
                        {
                            Id = 6,
                            GameId = 1,
                            Url = "https://i.guim.co.uk/img/static/sys-images/Guardian/Pix/pictures/2015/5/13/1431520130189/8bfad8ae-5a24-4617-988e-ccafee83324f-1020x612.jpeg?width=700&quality=85&auto=format&fit=max&s=8a7d3e78ea1329d9442f2b175bc7eb14"
                        },
                        new
                        {
                            Id = 7,
                            GameId = 1,
                            Url = "https://s1.dmcdn.net/v/7dQua1X-34xfWvryS/x1080"
                        },
                        new
                        {
                            Id = 8,
                            GameId = 1,
                            Url = "https://venturebeat.com/wp-content/uploads/2022/12/witcher-5.jpg?w=791&resize=1200%2C910&strip=all"
                        },
                        new
                        {
                            Id = 9,
                            GameId = 1,
                            Url = "https://media.thenerdstash.com/wp-content/uploads/2022/12/GOG-Winter-Sale.jpg.webp"
                        },
                        new
                        {
                            Id = 10,
                            GameId = 1,
                            Url = "https://assetsio.reedpopcdn.com/Site_qTBBJD0.jpg?width=1600&height=900&fit=crop&quality=100&format=png&enable=upscale&auto=webp"
                        },
                        new
                        {
                            Id = 11,
                            GameId = 2,
                            Url = "https://link-to-first-image-for-RDR2.com"
                        },
                        new
                        {
                            Id = 12,
                            GameId = 2,
                            Url = "https://link-to-second-image-for-RDR2.com"
                        },
                        new
                        {
                            Id = 16,
                            GameId = 3,
                            Url = "https://link-to-first-image-for-cyberpunk2077.com"
                        },
                        new
                        {
                            Id = 17,
                            GameId = 3,
                            Url = "https://link-to-second-image-for-cyberpunk2077.com"
                        },
                        new
                        {
                            Id = 21,
                            GameId = 4,
                            Url = "https://link-to-first-image-for-doom-eternal.com"
                        },
                        new
                        {
                            Id = 22,
                            GameId = 4,
                            Url = "https://link-to-second-image-for-doom-eternal.com"
                        },
                        new
                        {
                            Id = 26,
                            GameId = 5,
                            Url = "https://link-to-first-image-for-AC-valhalla.com"
                        },
                        new
                        {
                            Id = 27,
                            GameId = 5,
                            Url = "https://link-to-second-image-for-AC-valhalla.com"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("text");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Note")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("BankName")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime?>("CardExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CardLastFourDigits")
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<int?>("CardType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("GameId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.AgeRating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Rating")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AgeRatings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Rating = "Everyone"
                        },
                        new
                        {
                            Id = 2,
                            Rating = "Mature"
                        },
                        new
                        {
                            Id = 3,
                            Rating = "Teen"
                        },
                        new
                        {
                            Id = 4,
                            Rating = "Adults Only"
                        },
                        new
                        {
                            Id = 5,
                            Rating = "Everyone 10+"
                        },
                        new
                        {
                            Id = 6,
                            Rating = "Adults Only 18+"
                        },
                        new
                        {
                            Id = 7,
                            Rating = "Everyone 10+ with Cartoon Violence"
                        },
                        new
                        {
                            Id = 8,
                            Rating = "Mature 17+ with Blood and Gore, Intense Violence"
                        },
                        new
                        {
                            Id = 9,
                            Rating = "Teen 13+ with Mild Language, Violence"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double?>("AverageRating")
                        .HasColumnType("double precision");

                    b.Property<int?>("DLCImageId")
                        .HasColumnType("integer");

                    b.Property<string>("DLCName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Developer")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscountedPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("MinimumSystemRequirements")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Publisher")
                        .HasColumnType("text");

                    b.Property<string>("RecommendedSystemRequirements")
                        .HasColumnType("text");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TrailerUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("DLCs");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DLCName = "The Witcher 3: Hearts of Stone",
                            Description = "Embark on a new adventure as Geralt of Rivia in the Hearts of Stone expansion.",
                            GameId = 1,
                            Price = 9.99m,
                            ReleaseDate = new DateTime(2015, 10, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            DLCName = "The Witcher 3: Blood and Wine",
                            Description = "Visit the picturesque land of Toussaint in the Blood and Wine expansion.",
                            GameId = 1,
                            Price = 19.99m,
                            ReleaseDate = new DateTime(2016, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            DLCName = "RDR2: Frontier Tales",
                            Description = "Experience new stories from the Wild West in the Frontier Tales expansion.",
                            GameId = 2,
                            Price = 14.99m,
                            ReleaseDate = new DateTime(2019, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            DLCName = "RDR2: Legend of the East",
                            Description = "Unlock the mysteries of the East in this exciting new DLC.",
                            GameId = 2,
                            Price = 19.99m,
                            ReleaseDate = new DateTime(2020, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            DLCName = "Cyberpunk: Night City Stories",
                            Description = "Dive deeper into Night City with additional quests and characters.",
                            GameId = 3,
                            Price = 12.99m,
                            ReleaseDate = new DateTime(2021, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            DLCName = "Cyberpunk: Beyond the Wall",
                            Description = "Venture beyond the city limits and explore the wastelands.",
                            GameId = 3,
                            Price = 24.99m,
                            ReleaseDate = new DateTime(2022, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            DLCName = "Doom Eternal: Hell's Ascent",
                            Description = "Climb through the new challenges and face tougher demons.",
                            GameId = 4,
                            Price = 19.99m,
                            ReleaseDate = new DateTime(2021, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            DLCName = "Doom Eternal: The Slayer's Return",
                            Description = "Return to the origin of the Slayer and discover his roots.",
                            GameId = 4,
                            Price = 19.99m,
                            ReleaseDate = new DateTime(2021, 12, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            DLCName = "AC Valhalla: Rise of the Druids",
                            Description = "Travel to Ireland and confront the Druid cult.",
                            GameId = 5,
                            Price = 24.99m,
                            ReleaseDate = new DateTime(2021, 5, 13, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            DLCName = "AC Valhalla: The Siege of Paris",
                            Description = "Invade the fortified city of Paris and shape its future.",
                            GameId = 5,
                            Price = 24.99m,
                            ReleaseDate = new DateTime(2021, 8, 12, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLCImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Caption")
                        .HasColumnType("text");

                    b.Property<int>("DLCId")
                        .HasColumnType("integer");

                    b.Property<int?>("DLCId1")
                        .HasColumnType("integer");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DLCId")
                        .IsUnique();

                    b.HasIndex("DLCId1");

                    b.ToTable("DLCImages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Caption = "The Witcher 3: Hearts of Stone DLC Image",
                            DLCId = 1,
                            ImageUrl = "https://static.wikia.nocookie.net/witcher/images/0/09/Tw3_expansion_pack_hos.jpg/revision/latest?cb=20150908190146"
                        },
                        new
                        {
                            Id = 2,
                            Caption = "The Witcher 3: Blood and Wine DLC Image",
                            DLCId = 2,
                            ImageUrl = "https://static.wikia.nocookie.net/witcher/images/8/89/Tw3_Blood_and_Wine_cover_art.jpg/revision/latest?cb=20160414142032"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GameGenre", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("GameGenres");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GamePlatform", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("PlatformId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "PlatformId");

                    b.HasIndex("PlatformId");

                    b.ToTable("GamePlatforms");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Open World"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Role Playing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Strategy"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Simulation"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Fighting"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Horror"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DLCId")
                        .HasColumnType("integer");

                    b.Property<int?>("GameId")
                        .HasColumnType("integer");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("DLCId");

                    b.HasIndex("GameId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Platform");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "PC"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PlayStation 5"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Xbox Series X"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Nintendo Switch"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mobile"
                        },
                        new
                        {
                            Id = 6,
                            Name = "PlayStation 4"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Xbox One"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Nintendo Switch Lite"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Google Stadia"
                        });
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)");

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishlistItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("WishlistId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishlistItems");
                });

            modelBuilder.Entity("backend.Models.Product.GameGameTag", b =>
                {
                    b.Property<int>("GameId")
                        .HasColumnType("integer");

                    b.Property<int>("GameTagId")
                        .HasColumnType("integer");

                    b.HasKey("GameId", "GameTagId");

                    b.HasIndex("GameTagId");

                    b.ToTable("GameGameTags");
                });

            modelBuilder.Entity("backend.Models.Product.GameTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TagId"));

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            TagId = 1,
                            TagName = "Fantasy"
                        },
                        new
                        {
                            TagId = 2,
                            TagName = "Medieval"
                        },
                        new
                        {
                            TagId = 3,
                            TagName = "Story Rich"
                        },
                        new
                        {
                            TagId = 4,
                            TagName = "Sci-Fi"
                        },
                        new
                        {
                            TagId = 5,
                            TagName = "Post-Apocalyptic"
                        },
                        new
                        {
                            TagId = 6,
                            TagName = "Horror"
                        },
                        new
                        {
                            TagId = 7,
                            TagName = "Survival"
                        },
                        new
                        {
                            TagId = 8,
                            TagName = "Retro"
                        },
                        new
                        {
                            TagId = 9,
                            TagName = "Puzzle"
                        },
                        new
                        {
                            TagId = 10,
                            TagName = "Platformer"
                        },
                        new
                        {
                            TagId = 11,
                            TagName = "Shooter"
                        },
                        new
                        {
                            TagId = 12,
                            TagName = "Strategy"
                        },
                        new
                        {
                            TagId = 13,
                            TagName = "RPG"
                        },
                        new
                        {
                            TagId = 14,
                            TagName = "VR"
                        },
                        new
                        {
                            TagId = 15,
                            TagName = "Multiplayer"
                        },
                        new
                        {
                            TagId = 16,
                            TagName = "Singleplayer"
                        },
                        new
                        {
                            TagId = 17,
                            TagName = "Racing"
                        },
                        new
                        {
                            TagId = 18,
                            TagName = "Sports"
                        },
                        new
                        {
                            TagId = 19,
                            TagName = "Open World"
                        },
                        new
                        {
                            TagId = 20,
                            TagName = "Sandbox"
                        },
                        new
                        {
                            TagId = 21,
                            TagName = "City Builder"
                        },
                        new
                        {
                            TagId = 22,
                            TagName = "Management"
                        },
                        new
                        {
                            TagId = 23,
                            TagName = "Simulation"
                        },
                        new
                        {
                            TagId = 24,
                            TagName = "Turn-Based"
                        },
                        new
                        {
                            TagId = 25,
                            TagName = "Roguelike"
                        },
                        new
                        {
                            TagId = 26,
                            TagName = "Narrative"
                        },
                        new
                        {
                            TagId = 27,
                            TagName = "Visual Novel"
                        },
                        new
                        {
                            TagId = 28,
                            TagName = "Anime"
                        },
                        new
                        {
                            TagId = 29,
                            TagName = "Pixel Art"
                        },
                        new
                        {
                            TagId = 30,
                            TagName = "Crafting"
                        });
                });

            modelBuilder.Entity("backend.Models.User.UserFriend", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("FriendId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "FriendId");

                    b.HasIndex("FriendId");

                    b.ToTable("UserFriends");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.AgeRating", "AgeRating")
                        .WithMany("Games")
                        .HasForeignKey("AgeRatingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", null)
                        .WithMany("GameLibrary")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("AgeRating");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.GameImage", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameImages")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Orders")
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.OrderItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("OrderItems")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payment", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.PaymentMethod", "PaymentMethod")
                        .WithMany()
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("VideoGameAppBackend.Models.Payments.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.CartItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Payments.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("DLCs")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLCImage", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.DLC", null)
                        .WithOne("DLCImage")
                        .HasForeignKey("VideoGameAppBackend.Models.Product.DLCImage", "DLCId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.DLC", "DLC")
                        .WithMany("DLCImages")
                        .HasForeignKey("DLCId1");

                    b.Navigation("DLC");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GameGenre", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameGenres")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.Genre", "Genre")
                        .WithMany("GameGenres")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.GamePlatform", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.Platform", "Platform")
                        .WithMany("GamePlatforms")
                        .HasForeignKey("PlatformId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Platform");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Language", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Product.DLC", null)
                        .WithMany("SupportedLanguages")
                        .HasForeignKey("DLCId");

                    b.HasOne("VideoGameAppBackend.Models.Game", null)
                        .WithMany("SupportedLanguages")
                        .HasForeignKey("GameId");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Review", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("Reviews")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("WishLists")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishlistItem", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany()
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.Product.WishList", "Wishlist")
                        .WithMany("WishlistItems")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("backend.Models.Product.GameGameTag", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.Game", "Game")
                        .WithMany("GameGameTags")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("backend.Models.Product.GameTag", "GameTag")
                        .WithMany("GameGameTags")
                        .HasForeignKey("GameTagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("GameTag");
                });

            modelBuilder.Entity("backend.Models.User.UserFriend", b =>
                {
                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "Friend")
                        .WithMany()
                        .HasForeignKey("FriendId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("VideoGameAppBackend.Models.ApplicationUser", "User")
                        .WithMany("UserFriends")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Friend");

                    b.Navigation("User");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("GameLibrary");

                    b.Navigation("Orders");

                    b.Navigation("Reviews");

                    b.Navigation("UserFriends");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Game", b =>
                {
                    b.Navigation("DLCs");

                    b.Navigation("GameGameTags");

                    b.Navigation("GameGenres");

                    b.Navigation("GameImages");

                    b.Navigation("GamePlatforms");

                    b.Navigation("OrderItems");

                    b.Navigation("Reviews");

                    b.Navigation("SupportedLanguages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Payments.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.AgeRating", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.DLC", b =>
                {
                    b.Navigation("DLCImage");

                    b.Navigation("DLCImages");

                    b.Navigation("SupportedLanguages");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Genre", b =>
                {
                    b.Navigation("GameGenres");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.Platform", b =>
                {
                    b.Navigation("GamePlatforms");
                });

            modelBuilder.Entity("VideoGameAppBackend.Models.Product.WishList", b =>
                {
                    b.Navigation("WishlistItems");
                });

            modelBuilder.Entity("backend.Models.Product.GameTag", b =>
                {
                    b.Navigation("GameGameTags");
                });
#pragma warning restore 612, 618
        }
    }
}
